
Умеет применять профайлеры и имеет опыт их использования


Знает основные параметры, передаваемые при старте JVM (-Xms, -Xmx, -Xss)


Умеет использовать reflection для работы с аннотациями


Знает о последних тенденциях в Java и что войдет в следующий релиз


Знает что такое профайлинг и для чего он используется, знает какими инструментами можно его провести


Понимает что такое динамическая загрузка классов и какие есть загрузчики


Знает внутренне устройство коллекций, понимает что такое коллизии и какой контракт между equals и hashCode


Знает о возможности настройки GC для оптимизации работы Java приложения и когда это может понадобиться


Знает что такое логи GC, для чего они могут быть использованы и как их читать


Знает что такое memory dump, для чего он используется и как им пользоваться


Знает когда нужно применять профайлеры, какие они бывают и как они влияют на работу приложения


Знает и понимает принципы SOLID


Знает основные паттерны объектно-ориентированного программирования


Знает и умеет пользоваться статическими анализаторами кода


Понимает принцип работы service discovery


Знает как работает distributed tracing


Понимает разницу в принципах работы Load balancer и reverse proxy


Понимает, в чем отличие Weak/eventual/strong consistency


Знает варианты read/write масштабирования для DB


Знает CAP теорему и может привести примеры CP/AP систем


Знает паттерны интеграции API в микросервисах (API Composition, API Gateway, Backend-for-Frontend)


Знает паттерны согласованности данных в распределённых системах (2PC, Saga, Outbox, Event sourcing, CQRS)


Знает инфраструктурные паттерны микросервисов (Sidecar, Ambassador, Strangler, Kappa, Circuit Breaker, Service Mesh)


Знает основные концепции DDD и для чего он используется. Понимает что такое домен, универсальный язык и ограниченный контекст.


Знает что делают операции zip, concat, merge


Знает какие средства тестирования реактивного кода предоставляет библиотека reactor-test


Знает основные понятия Reactive manifesto


Знает способы как можно распараллелить реактивный код


Знает как работают publishOn и subscribeOn


Знает как Project Reactor взаимодействует с другими частями экосистемы Spring, например, с Spring WebFlux, R2DBC или WebClient


Понимает как работают аннотации cacheable, transactional, async и какие у них есть ограничения.


Знает о проекте Spring Cloud, знает какие в нем есть компоненты и умеет их использовать


Знает компоненты Spring WebFlux и как с ними работать (Flux, Mono, маршрутизация, хендлеры, вебклиенты, репозитории)


Знает что такое Bean Post Processor и Bean Factory Post Processor, для чего они используются и что можно сделать с их помощью


нает как устроена генерация прокси для аннотаций Spring, знает как самостоятельно реализовать функционал, сходный с Cacheable\Async\Transactional


======================== KOTLIN ===============================


Знает как конвертировать Mono,Flux в coroutine.


Знает основные изменения в синтаксисе по сравнению с Java (null safety, extensions, static typing, smart casting, etc).


Знает как создать делегат.


Знает как вызвать Java код из Kotlin.


Знает как вызвать Kotlin extension функции из Java.


Знает что такое sealed классы.


Знает как сделать эквивалент статических методов Java в Kotlin.


Знает как сделать аналог try-with-resources в Kotlin.


Знает аналог stream api в Kotlin и понимает его особенности.


Знает как работает безопасный вызов (?.) и оператор Элвиса (?:)


Знает что такое lateinit и когда его использовать.


!!!!!!


Знает как создать анонимный класс и что такое SAM-интерфейсы.


Знает чем data class отличается от обычного класса.


Знает основные понятия coroutines и как их использовать.


Знает что такое inline функции и классы и для чего они.


!!!


Знает в чем отличие Any в Kotlin от Object в Java.


Знает как работает рефлексия в Kotlin.


!!!!!!!


Знает когда нельзя заменить sequence на stream.


Знает отличие иерархии коллекций Kotlin от Java.


Знает для чего нужны CoroutineScope и coroutineContext.


Знает как обрабатывать исключения в корутинах.


Знает как работает Flow и чем он отличается от Flux.


Знает чем invoke, run, apply, also отличаются друг от друга.


Знает как использовать делегаты lazy, observable, vetoable.


Знает как работает Mono Flux в coroutine.


Знает как можно вызвать Kotlin coroutine в Java коде.


Знает как внутренне устроены coroutines.


Знает как работать с generic типом внутри методов и чем generic в Kotlin отличается от Java.


Знает как реализованы suspend-функции на уровне байт-кода.


Понимает различия между виртуальными потоками и корутинами.


Знает чем Channel отличается от Flow.


================================================ БД

Знает что такое нормализация и для чего она применяется


Понимает принципы ACID и к чему они относятся


Понимает уровни изолированности транзакций и какие проблемы они решают


Знает что такое партиционирование, какие задачи оно решает, по каким правилам выбираются таблицы.


Знает как обеспечивается сохранность данных, что такое репликация, как происходит запись\чтение


Знает как проводить оптимизацию запросов, понимает что такое план выполнения запроса.


!!
Знает что такое распредленные транзакции, для чего они нужны и как  реализуются


Знает что такое write ahead log\transaction log, как он работает и для чего нужен


Mongo


Знает что такое replica set


Знает как устроен шардированный кластер MongoDB и как обеспечивается отказоустойчивость


Знает что такое Read\Write concern и eventual consistency


Знает как работают транзакции в MongoDB и какие они предоставляют гарантии


Знает какие есть виды индексов и как ими пользоваться


Знает с помощью какого механизма MongoDB гарантирует персистентность


Знает какие гарантии исходя из CAP-теоремы обеспечивает MongoDB в разных конфигурациях


Знает что такое WireTiger в MongoDB и какой вид блокировок он использует


Знает, как работает механизм oplog в MongoDB и какую роль он играет в репликации и восстановлении данных


++++++++++++++++=


Kafka


Знает что такое Kafka, для чего она используется, из каких компонентов состоит кластер


Знает что такое offset и где он хранится


Знает какие есть политики очистки в Kafka, какая взаимосвязь с размером сегмента


Знает что такое transaction log в Kafka и для чего он используется


Знает что такое партиция, на что влияет, как происходит запись сообщения


Понимает взаимосвязь количества продюсеров, консьюмеров и партиций. Знает что такое ребаланс, когда вызывается и что при этом происходит


Знает какие гарантии доставки предоставляет Kafka, как это настраивается


Понимает как Kafka обеспечивает отказоустойчивость при падении брокеров


Знает что такое idempotent producer и чем он отличается от обычного


Знает о том, какие гарантии порядка предоставляет Kafka